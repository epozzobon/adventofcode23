package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
)

type nodeLine struct {
	src   string
	left  string
	right string
}

type node struct {
	name string
	l    *node
	r    *node
}

var reLine = regexp.MustCompile(`^([A-Z]+)\s*=\s*\(([A-Z]+),\s*([A-Z]+)\)$`)

func main() {

	file, err := os.Open("input.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	nodes := make(map[string]*node)
	lines := []nodeLine{}

	scanner.Scan()
	instructions := scanner.Text()

	scanner.Scan()
	empty := scanner.Text()
	if empty != "" {
		panic("expected empty line")
	}
	for scanner.Scan() {
		txt := scanner.Text()
		matches := reLine.FindSubmatch([]byte(txt))
		if len(matches) != 4 {
			panic("bad input line format")
		}
		src, left, right := string(matches[1]), string(matches[2]), string(matches[3])
		lines = append(lines, nodeLine{src: src, left: left, right: right})
		if nodes[src] != nil {
			panic("Node already defined")
		}
		nodes[src] = &node{name: src, l: nil, r: nil}
	}

	err1 := scanner.Err()
	if err1 != nil {
		log.Fatal(err1)
	}

	for _, line := range lines {
		nodes[line.src].l = nodes[line.left]
		nodes[line.src].r = nodes[line.right]
	}

	node := nodes["AAA"]
	count := 0
	for i := 0; i < len(instructions) && node.name != "ZZZ"; i = (i + 1) % len(instructions) {
		c := instructions[i]
		count++
		if c == 'L' {
			node = node.l
		} else if c == 'R' {
			node = node.r
		} else {
			panic("bad instruction")
		}
		fmt.Println(node.name)
	}
	fmt.Println(count)

	_, _ = instructions, nodes
}
